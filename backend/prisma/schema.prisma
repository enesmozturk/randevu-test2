// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//   output   = "../generated/prisma"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  phone             String    @unique
  password          String
  name              String
  surname           String
  email             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  refreshTokens     RefreshToken[]
  ownedVenues       Venue[]   @relation("OwnedVenues")
  venueMemberships  VenueManager[]
  reservations      Reservation[]
  verificationCodes VerificationCode[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model VerificationCode {
  id         String   @id @default(cuid())
  code       String
  phoneNumber String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  purpose    VerificationPurpose
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

enum VerificationPurpose {
  SIGNUP
  RESET_PASSWORD
}

model Venue {
  id            String    @id @default(cuid())
  name          String
  type          String
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  owner         User      @relation("OwnedVenues", fields: [ownerId], references: [id])
  ownerId       String
  managers      VenueManager[]
  rules         ReservationRule?
  units         ReservationUnit[]
}

model VenueManager {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  venue     Venue    @relation(fields: [venueId], references: [id])
  userId    String
  venueId   String
  createdAt DateTime @default(now())

  @@unique([userId, venueId])
}

model ReservationRule {
  id                    String   @id @default(cuid())
  venue                 Venue    @relation(fields: [venueId], references: [id])
  venueId               String   @unique
  allowGuests           Boolean  // Giriş yapmayan kullanıcı rezervasyon yapabilir mi
  requiresApproval      Boolean  // Yönetici onayı gerekli mi
  reservationTimeUnit   TimeUnit
}

enum TimeUnit {
  MINUTE
  HOUR
  DAY
}

model ReservationUnit {
  id        String    @id @default(cuid())
  name      String
  venue     Venue     @relation(fields: [venueId], references: [id])
  venueId   String
  createdAt DateTime  @default(now())
  reservations Reservation[]
}

model Reservation {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  unit         ReservationUnit @relation(fields: [unitId], references: [id])
  unitId       String
  startTime    DateTime
  endTime      DateTime
  status       ReservationStatus
  createdAt    DateTime @default(now())
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}